/* tslint:disable */
/* eslint-disable */
/**
 * JS-SS21 API Documentation
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Company,
    CompanyFromJSON,
    CompanyToJSON,
    CompanyDto,
    CompanyDtoFromJSON,
    CompanyDtoToJSON,
    CreateJobDto,
    CreateJobDtoFromJSON,
    CreateJobDtoToJSON,
    Job,
    JobFromJSON,
    JobToJSON,
} from '../models';

export interface CompaniesControllerAddStudentsRequestToRequestsRequest {
    studentId: string;
    jobId: string;
}

export interface CompaniesControllerCreateJobRequest {
    createJobDto: CreateJobDto;
}

export interface CompaniesControllerUpdateProfileRequest {
    companyDto: CompanyDto;
}

/**
 * 
 */
export class CompaniesApi extends runtime.BaseAPI {

    /**
     * add student to request
     */
    async companiesControllerAddStudentsRequestToRequestsRaw(requestParameters: CompaniesControllerAddStudentsRequestToRequestsRequest): Promise<runtime.ApiResponse<Array<boolean>>> {
        if (requestParameters.studentId === null || requestParameters.studentId === undefined) {
            throw new runtime.RequiredError('studentId','Required parameter requestParameters.studentId was null or undefined when calling companiesControllerAddStudentsRequestToRequests.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling companiesControllerAddStudentsRequestToRequests.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("access-token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/companies/job/accept/{studentId}/{jobId}`.replace(`{${"studentId"}}`, encodeURIComponent(String(requestParameters.studentId))).replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * add student to request
     */
    async companiesControllerAddStudentsRequestToRequests(requestParameters: CompaniesControllerAddStudentsRequestToRequestsRequest): Promise<Array<boolean>> {
        const response = await this.companiesControllerAddStudentsRequestToRequestsRaw(requestParameters);
        return await response.value();
    }

    /**
     * create job
     */
    async companiesControllerCreateJobRaw(requestParameters: CompaniesControllerCreateJobRequest): Promise<runtime.ApiResponse<Job>> {
        if (requestParameters.createJobDto === null || requestParameters.createJobDto === undefined) {
            throw new runtime.RequiredError('createJobDto','Required parameter requestParameters.createJobDto was null or undefined when calling companiesControllerCreateJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("access-token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/companies/job`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateJobDtoToJSON(requestParameters.createJobDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobFromJSON(jsonValue));
    }

    /**
     * create job
     */
    async companiesControllerCreateJob(requestParameters: CompaniesControllerCreateJobRequest): Promise<Job> {
        const response = await this.companiesControllerCreateJobRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete own profile
     */
    async companiesControllerDeleteRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("access-token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/companies`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete own profile
     */
    async companiesControllerDelete(): Promise<void> {
        await this.companiesControllerDeleteRaw();
    }

    /**
     * get published jobs
     */
    async companiesControllerGetJobsByCompanyRaw(): Promise<runtime.ApiResponse<Array<Job>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("access-token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/companies/jobs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobFromJSON));
    }

    /**
     * get published jobs
     */
    async companiesControllerGetJobsByCompany(): Promise<Array<Job>> {
        const response = await this.companiesControllerGetJobsByCompanyRaw();
        return await response.value();
    }

    /**
     * update profile
     */
    async companiesControllerUpdateProfileRaw(requestParameters: CompaniesControllerUpdateProfileRequest): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.companyDto === null || requestParameters.companyDto === undefined) {
            throw new runtime.RequiredError('companyDto','Required parameter requestParameters.companyDto was null or undefined when calling companiesControllerUpdateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("access-token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/companies`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyDtoToJSON(requestParameters.companyDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     * update profile
     */
    async companiesControllerUpdateProfile(requestParameters: CompaniesControllerUpdateProfileRequest): Promise<Company> {
        const response = await this.companiesControllerUpdateProfileRaw(requestParameters);
        return await response.value();
    }

}
