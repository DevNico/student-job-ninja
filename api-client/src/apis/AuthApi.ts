/* tslint:disable */
/* eslint-disable */
/**
 * JS-SS21 API Documentation
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Company,
    CompanyFromJSON,
    CompanyToJSON,
    CompanyDto,
    CompanyDtoFromJSON,
    CompanyDtoToJSON,
    Student,
    StudentFromJSON,
    StudentToJSON,
    StudentDto,
    StudentDtoFromJSON,
    StudentDtoToJSON,
    UserResponse,
    UserResponseFromJSON,
    UserResponseToJSON,
} from '../models';

export interface CompaniesControllerSignupRequest {
    companyDto: CompanyDto;
}

export interface StudentsControllerSignupRequest {
    studentDto: StudentDto;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async appControllerGetOwnProfileRaw(): Promise<runtime.ApiResponse<UserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("access-token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     */
    async appControllerGetOwnProfile(): Promise<UserResponse> {
        const response = await this.appControllerGetOwnProfileRaw();
        return await response.value();
    }

    /**
     */
    async companiesControllerSignupRaw(requestParameters: CompaniesControllerSignupRequest): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.companyDto === null || requestParameters.companyDto === undefined) {
            throw new runtime.RequiredError('companyDto','Required parameter requestParameters.companyDto was null or undefined when calling companiesControllerSignup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("access-token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/companies/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyDtoToJSON(requestParameters.companyDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     */
    async companiesControllerSignup(requestParameters: CompaniesControllerSignupRequest): Promise<Company> {
        const response = await this.companiesControllerSignupRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async studentsControllerSignupRaw(requestParameters: StudentsControllerSignupRequest): Promise<runtime.ApiResponse<Student>> {
        if (requestParameters.studentDto === null || requestParameters.studentDto === undefined) {
            throw new runtime.RequiredError('studentDto','Required parameter requestParameters.studentDto was null or undefined when calling studentsControllerSignup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("access-token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/students/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudentDtoToJSON(requestParameters.studentDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentFromJSON(jsonValue));
    }

    /**
     */
    async studentsControllerSignup(requestParameters: StudentsControllerSignupRequest): Promise<Student> {
        const response = await this.studentsControllerSignupRaw(requestParameters);
        return await response.value();
    }

}
