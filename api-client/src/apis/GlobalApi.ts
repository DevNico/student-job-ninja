/* tslint:disable */
/* eslint-disable */
/**
 * JS-SS21 API Documentation
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Student,
    StudentFromJSON,
    StudentToJSON,
} from '../models';

export interface AppControllerGetUserByIdRequest {
    uid: string;
}

/**
 * 
 */
export class GlobalApi extends runtime.BaseAPI {

    /**
     * get student / company by id
     */
    async appControllerGetUserByIdRaw(requestParameters: AppControllerGetUserByIdRequest): Promise<runtime.ApiResponse<Student>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling appControllerGetUserById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("access-token", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/{uid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters.uid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentFromJSON(jsonValue));
    }

    /**
     * get student / company by id
     */
    async appControllerGetUserById(requestParameters: AppControllerGetUserByIdRequest): Promise<Student> {
        const response = await this.appControllerGetUserByIdRaw(requestParameters);
        return await response.value();
    }

}
