/* tslint:disable */
/* eslint-disable */
/**
 * JS-SS21 API Documentation
 * API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { Company, CompanyFromJSON, CompanyFromJSONTyped, CompanyToJSON, Job, Student, StudentFromJSON, StudentFromJSONTyped, StudentToJSON } from './';
import { JobFromJSON, JobToJSON } from './Job';
import { JobWithCompany, JobWithCompanyFromJSON, JobWithCompanyToJSON } from './JobWithCompany';

/**
 *
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
	/**
	 * student or company
	 * @type {string}
	 * @memberof UserResponse
	 */
	userType: string;
	/**
	 * Student or Company entity
	 * @type {Student | Company}
	 * @memberof UserResponse
	 */
	userData: Student | Company;
	/**
	 * Jobs with company or only jobs (userType Company)
	 * @type {Array<string>}
	 * @memberof UserResponse
	 */
	assignedJobs: Job[] | JobWithCompany[];
}

export function UserResponseFromJSON(json: any): UserResponse {
	return UserResponseFromJSONTyped(json, false);
}

export function UserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponse {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		userType: json['userType'],
		userData: json['userType'] === 'student' ? StudentFromJSON(json['userData']) : CompanyFromJSON(json['userData']),
		assignedJobs:
			json['userType'] === 'student'
				? (json['assignedJobs'] as any[]).map((j) => JobWithCompanyFromJSON(j))
				: (json['assignedJobs'] as any[]).map((j) => JobFromJSON(j)),
	};
}

export function UserResponseToJSON(value?: UserResponse | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		userType: value.userType,
		userData: value.userType === 'student' ? StudentToJSON(value.userData as Student) : CompanyToJSON(value.userData as Company),
		assignedJobs: value.assignedJobs.map((j: Job | JobWithCompany) =>
			value.userType === 'student' ? JobWithCompanyToJSON(j as JobWithCompany) : JobToJSON(j as Job)
		),
	};
}
