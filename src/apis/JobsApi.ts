/* tslint:disable */
/* eslint-disable */
/**
 * JS-SS21 API Documentation
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SearchJobDto,
    SearchJobDtoFromJSON,
    SearchJobDtoToJSON,
} from '../models';

export interface JobsControllerGetJobByIdRequest {
    id: string;
}

export interface JobsControllerGetJobsByIdRequest {
    requestBody: Array<string>;
}

export interface JobsControllerSearchJobsRequest {
    searchJobDto: SearchJobDto;
}

/**
 * 
 */
export class JobsApi extends runtime.BaseAPI {

    /**
     * get job by id
     */
    async jobsControllerGetJobByIdRaw(requestParameters: JobsControllerGetJobByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling jobsControllerGetJobById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/jobs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get job by id
     */
    async jobsControllerGetJobById(requestParameters: JobsControllerGetJobByIdRequest): Promise<object> {
        const response = await this.jobsControllerGetJobByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * get jobs by ids
     */
    async jobsControllerGetJobsByIdRaw(requestParameters: JobsControllerGetJobsByIdRequest): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling jobsControllerGetJobsById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/jobs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get jobs by ids
     */
    async jobsControllerGetJobsById(requestParameters: JobsControllerGetJobsByIdRequest): Promise<Array<object>> {
        const response = await this.jobsControllerGetJobsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * search for Jobs
     */
    async jobsControllerSearchJobsRaw(requestParameters: JobsControllerSearchJobsRequest): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters.searchJobDto === null || requestParameters.searchJobDto === undefined) {
            throw new runtime.RequiredError('searchJobDto','Required parameter requestParameters.searchJobDto was null or undefined when calling jobsControllerSearchJobs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/jobs/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchJobDtoToJSON(requestParameters.searchJobDto),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * search for Jobs
     */
    async jobsControllerSearchJobs(requestParameters: JobsControllerSearchJobsRequest): Promise<Array<object>> {
        const response = await this.jobsControllerSearchJobsRaw(requestParameters);
        return await response.value();
    }

}
