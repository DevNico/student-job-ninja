/* tslint:disable */
/* eslint-disable */
/**
 * JS-SS21 API Documentation
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    street1: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    street2: string;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    zip: number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    city: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    state: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    country: string;
}
/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * address field
     * @type {Address}
     * @memberof Company
     */
    address: Address;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    _id: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    company_info: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    homepage: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    image_url: string;
}
/**
 * 
 * @export
 * @interface CompanyDto
 */
export interface CompanyDto {
    /**
     * address field
     * @type {Address}
     * @memberof CompanyDto
     */
    address: Address;
    /**
     * 
     * @type {string}
     * @memberof CompanyDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDto
     */
    company_info: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDto
     */
    homepage?: string;
}
/**
 * 
 * @export
 * @interface CreateJobDto
 */
export interface CreateJobDto {
    /**
     * 
     * @type {string}
     * @memberof CreateJobDto
     */
    contactMail: string;
    /**
     * 
     * @type {string}
     * @memberof CreateJobDto
     */
    jobName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateJobDto
     */
    jobDescription: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateJobDto
     */
    jobQualifications: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateJobDto
     */
    skills: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateJobDto
     */
    workArea: string;
    /**
     * 
     * @type {number}
     * @memberof CreateJobDto
     */
    workBasis: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateJobDto
     */
    languages: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateJobDto
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof CreateJobDto
     */
    to: string;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    _id: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    publisher_id: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    contactMail: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    jobName: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    jobDescription: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Job
     */
    jobQualifications: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Job
     */
    skills: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    workArea: string;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    workBasis: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Job
     */
    languages: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    to: string;
    /**
     * 
     * @type {boolean}
     * @memberof Job
     */
    active: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Job
     */
    requested_by_students: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Job
     */
    requested_ids: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof Job
     */
    final_accepted_id: object;
}
/**
 * 
 * @export
 * @interface SearchJobDto
 */
export interface SearchJobDto {
    /**
     * 
     * @type {string}
     * @memberof SearchJobDto
     */
    searchString: string;
    /**
     * 
     * @type {string}
     * @memberof SearchJobDto
     */
    workArea: string;
    /**
     * 
     * @type {number}
     * @memberof SearchJobDto
     */
    workBasis: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchJobDto
     */
    languages: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchJobDto
     */
    skills: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SearchJobDto
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof SearchJobDto
     */
    to: string;
}
/**
 * 
 * @export
 * @interface Student
 */
export interface Student {
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    email: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof Student
     */
    identities?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Student
     */
    yearsOfExperience: number;
    /**
     * 
     * @type {Address}
     * @memberof Student
     */
    address: Address;
    /**
     * 
     * @type {University}
     * @memberof Student
     */
    university: University;
    /**
     * 
     * @type {number}
     * @memberof Student
     */
    semester: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Student
     */
    jobsMarkedIds?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Student
     */
    skills: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Student
     */
    languages: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    fromAvailable: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    toAvailable: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    workArea: string;
    /**
     * 
     * @type {number}
     * @memberof Student
     */
    workBasis: number;
}
/**
 * 
 * @export
 * @interface StudentDto
 */
export interface StudentDto {
    /**
     * address field
     * @type {Address}
     * @memberof StudentDto
     */
    address: Address;
    /**
     * university object
     * @type {University}
     * @memberof StudentDto
     */
    university: University;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    description: string;
    /**
     * 
     * @type {object}
     * @memberof StudentDto
     */
    yearsOfExperience: object;
    /**
     * 
     * @type {number}
     * @memberof StudentDto
     */
    semester: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof StudentDto
     */
    skills: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof StudentDto
     */
    languages: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    fromAvailable: string;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    toAvailable: string;
    /**
     * 
     * @type {number}
     * @memberof StudentDto
     */
    workBasis: number;
    /**
     * 
     * @type {string}
     * @memberof StudentDto
     */
    workArea: string;
}
/**
 * 
 * @export
 * @interface University
 */
export interface University {
    /**
     * 
     * @type {string}
     * @memberof University
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof University
     */
    homepage: string;
}
/**
 * 
 * @export
 * @interface UpdateStudentDto
 */
export interface UpdateStudentDto {
    /**
     * address field
     * @type {Address}
     * @memberof UpdateStudentDto
     */
    address: Address;
    /**
     * university object
     * @type {University}
     * @memberof UpdateStudentDto
     */
    university: University;
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentDto
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentDto
     */
    lastName: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateStudentDto
     */
    semester: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateStudentDto
     */
    skills: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateStudentDto
     */
    languages: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof UpdateStudentDto
     */
    yearsOfExperience: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentDto
     */
    fromAvailable: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentDto
     */
    toAvailable: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateStudentDto
     */
    workBasis: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentDto
     */
    workArea: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentDto
     */
    description: string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * student or company
     * @type {string}
     * @memberof UserResponse
     */
    userType: string;
    /**
     * Student entity
     * @type {Student | Company}
     * @memberof UserResponse
     */
    userData: Student | Company;
    /**
     * Jobs with company or only jobs (userType Company)
     * @type {Array<string>}
     * @memberof UserResponse
     */
    assignedJobs: Array<string>;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetOwnProfile: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CompanyDto} companyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerSignup: async (companyDto: CompanyDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDto' is not null or undefined
            assertParamExists('companiesControllerSignup', 'companyDto', companyDto)
            const localVarPath = `/companies/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsControllerSignup: async (studentDto: StudentDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentDto' is not null or undefined
            assertParamExists('studentsControllerSignup', 'studentDto', studentDto)
            const localVarPath = `/students/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetOwnProfile(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetOwnProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CompanyDto} companyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerSignup(companyDto: CompanyDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerSignup(companyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentsControllerSignup(studentDto: StudentDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentsControllerSignup(studentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetOwnProfile(options?: any): AxiosPromise<UserResponse> {
            return localVarFp.appControllerGetOwnProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompanyDto} companyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerSignup(companyDto: CompanyDto, options?: any): AxiosPromise<Company> {
            return localVarFp.companiesControllerSignup(companyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StudentDto} studentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsControllerSignup(studentDto: StudentDto, options?: any): AxiosPromise<Student> {
            return localVarFp.studentsControllerSignup(studentDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public appControllerGetOwnProfile(options?: any) {
        return AuthApiFp(this.configuration).appControllerGetOwnProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompanyDto} companyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public companiesControllerSignup(companyDto: CompanyDto, options?: any) {
        return AuthApiFp(this.configuration).companiesControllerSignup(companyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StudentDto} studentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public studentsControllerSignup(studentDto: StudentDto, options?: any) {
        return AuthApiFp(this.configuration).studentsControllerSignup(studentDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add student to request
         * @param {string} studentId 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerAddStudentsRequestToRequests: async (studentId: string, jobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('companiesControllerAddStudentsRequestToRequests', 'studentId', studentId)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('companiesControllerAddStudentsRequestToRequests', 'jobId', jobId)
            const localVarPath = `/companies/job/accept/{studentId}/{jobId}`
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)))
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create job
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerCreateJob: async (createJobDto: CreateJobDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createJobDto' is not null or undefined
            assertParamExists('companiesControllerCreateJob', 'createJobDto', createJobDto)
            const localVarPath = `/companies/job`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete own profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get published jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerGetJobsByCompany: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/companies/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update profile
         * @param {CompanyDto} companyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerUpdateProfile: async (companyDto: CompanyDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDto' is not null or undefined
            assertParamExists('companiesControllerUpdateProfile', 'companyDto', companyDto)
            const localVarPath = `/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary add student to request
         * @param {string} studentId 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerAddStudentsRequestToRequests(studentId: string, jobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerAddStudentsRequestToRequests(studentId, jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create job
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerCreateJob(createJobDto: CreateJobDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerCreateJob(createJobDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete own profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get published jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerGetJobsByCompany(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Job>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerGetJobsByCompany(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update profile
         * @param {CompanyDto} companyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerUpdateProfile(companyDto: CompanyDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerUpdateProfile(companyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesApiFp(configuration)
    return {
        /**
         * 
         * @summary add student to request
         * @param {string} studentId 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerAddStudentsRequestToRequests(studentId: string, jobId: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.companiesControllerAddStudentsRequestToRequests(studentId, jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create job
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerCreateJob(createJobDto: CreateJobDto, options?: any): AxiosPromise<Job> {
            return localVarFp.companiesControllerCreateJob(createJobDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete own profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerDelete(options?: any): AxiosPromise<void> {
            return localVarFp.companiesControllerDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get published jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerGetJobsByCompany(options?: any): AxiosPromise<Array<Job>> {
            return localVarFp.companiesControllerGetJobsByCompany(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update profile
         * @param {CompanyDto} companyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerUpdateProfile(companyDto: CompanyDto, options?: any): AxiosPromise<Company> {
            return localVarFp.companiesControllerUpdateProfile(companyDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export class CompaniesApi extends BaseAPI {
    /**
     * 
     * @summary add student to request
     * @param {string} studentId 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesControllerAddStudentsRequestToRequests(studentId: string, jobId: string, options?: any) {
        return CompaniesApiFp(this.configuration).companiesControllerAddStudentsRequestToRequests(studentId, jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create job
     * @param {CreateJobDto} createJobDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesControllerCreateJob(createJobDto: CreateJobDto, options?: any) {
        return CompaniesApiFp(this.configuration).companiesControllerCreateJob(createJobDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete own profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesControllerDelete(options?: any) {
        return CompaniesApiFp(this.configuration).companiesControllerDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get published jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesControllerGetJobsByCompany(options?: any) {
        return CompaniesApiFp(this.configuration).companiesControllerGetJobsByCompany(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update profile
     * @param {CompanyDto} companyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public companiesControllerUpdateProfile(companyDto: CompanyDto, options?: any) {
        return CompaniesApiFp(this.configuration).companiesControllerUpdateProfile(companyDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerTest: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/test/u`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerCreateTestJob: async (createJobDto: CreateJobDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createJobDto' is not null or undefined
            assertParamExists('companiesControllerCreateTestJob', 'createJobDto', createJobDto)
            const localVarPath = `/companies/jobtest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerSendTestMail: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/companies/testmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerTest(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerTest(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerCreateTestJob(createJobDto: CreateJobDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerCreateTestJob(createJobDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerSendTestMail(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerSendTestMail(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerTest(options?: any): AxiosPromise<object> {
            return localVarFp.appControllerTest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerCreateTestJob(createJobDto: CreateJobDto, options?: any): AxiosPromise<Job> {
            return localVarFp.companiesControllerCreateTestJob(createJobDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerSendTestMail(options?: any): AxiosPromise<void> {
            return localVarFp.companiesControllerSendTestMail(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerTest(options?: any) {
        return DefaultApiFp(this.configuration).appControllerTest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateJobDto} createJobDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companiesControllerCreateTestJob(createJobDto: CreateJobDto, options?: any) {
        return DefaultApiFp(this.configuration).companiesControllerCreateTestJob(createJobDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companiesControllerSendTestMail(options?: any) {
        return DefaultApiFp(this.configuration).companiesControllerSendTestMail(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GlobalApi - axios parameter creator
 * @export
 */
export const GlobalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get student / company by id
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetUserById: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('appControllerGetUserById', 'uid', uid)
            const localVarPath = `/user/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GlobalApi - functional programming interface
 * @export
 */
export const GlobalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GlobalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get student / company by id
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetUserById(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetUserById(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GlobalApi - factory interface
 * @export
 */
export const GlobalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GlobalApiFp(configuration)
    return {
        /**
         * 
         * @summary get student / company by id
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetUserById(uid: string, options?: any): AxiosPromise<Student> {
            return localVarFp.appControllerGetUserById(uid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GlobalApi - object-oriented interface
 * @export
 * @class GlobalApi
 * @extends {BaseAPI}
 */
export class GlobalApi extends BaseAPI {
    /**
     * 
     * @summary get student / company by id
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApi
     */
    public appControllerGetUserById(uid: string, options?: any) {
        return GlobalApiFp(this.configuration).appControllerGetUserById(uid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get job by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetJobById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerGetJobById', 'id', id)
            const localVarPath = `/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get jobs by ids
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetJobsById: async (requestBody: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('jobsControllerGetJobsById', 'requestBody', requestBody)
            const localVarPath = `/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary search for Jobs
         * @param {SearchJobDto} searchJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerSearchJobs: async (searchJobDto: SearchJobDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchJobDto' is not null or undefined
            assertParamExists('jobsControllerSearchJobs', 'searchJobDto', searchJobDto)
            const localVarPath = `/jobs/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get job by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerGetJobById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerGetJobById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get jobs by ids
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerGetJobsById(requestBody: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerGetJobsById(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary search for Jobs
         * @param {SearchJobDto} searchJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerSearchJobs(searchJobDto: SearchJobDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerSearchJobs(searchJobDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * 
         * @summary get job by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetJobById(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.jobsControllerGetJobById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get jobs by ids
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerGetJobsById(requestBody: Array<string>, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.jobsControllerGetJobsById(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary search for Jobs
         * @param {SearchJobDto} searchJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerSearchJobs(searchJobDto: SearchJobDto, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.jobsControllerSearchJobs(searchJobDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * 
     * @summary get job by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsControllerGetJobById(id: string, options?: any) {
        return JobsApiFp(this.configuration).jobsControllerGetJobById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get jobs by ids
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsControllerGetJobsById(requestBody: Array<string>, options?: any) {
        return JobsApiFp(this.configuration).jobsControllerGetJobsById(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary search for Jobs
     * @param {SearchJobDto} searchJobDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsControllerSearchJobs(searchJobDto: SearchJobDto, options?: any) {
        return JobsApiFp(this.configuration).jobsControllerSearchJobs(searchJobDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudentsApi - axios parameter creator
 * @export
 */
export const StudentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary accept job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsControllerAcceptJob: async (jobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('studentsControllerAcceptJob', 'jobId', jobId)
            const localVarPath = `/students/accept/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete own profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsControllerDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/students`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get all requested jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsControllerGetRequests: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/students/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary request job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsControllerRequestJob: async (jobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('studentsControllerRequestJob', 'jobId', jobId)
            const localVarPath = `/students/request/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update profile
         * @param {UpdateStudentDto} updateStudentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsControllerUpdateProfile: async (updateStudentDto: UpdateStudentDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateStudentDto' is not null or undefined
            assertParamExists('studentsControllerUpdateProfile', 'updateStudentDto', updateStudentDto)
            const localVarPath = `/students`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStudentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentsApi - functional programming interface
 * @export
 */
export const StudentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary accept job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentsControllerAcceptJob(jobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentsControllerAcceptJob(jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete own profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentsControllerDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentsControllerDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get all requested jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentsControllerGetRequests(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentsControllerGetRequests(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary request job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentsControllerRequestJob(jobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentsControllerRequestJob(jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update profile
         * @param {UpdateStudentDto} updateStudentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentsControllerUpdateProfile(updateStudentDto: UpdateStudentDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentsControllerUpdateProfile(updateStudentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentsApi - factory interface
 * @export
 */
export const StudentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentsApiFp(configuration)
    return {
        /**
         * 
         * @summary accept job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsControllerAcceptJob(jobId: string, options?: any): AxiosPromise<void> {
            return localVarFp.studentsControllerAcceptJob(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete own profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsControllerDelete(options?: any): AxiosPromise<void> {
            return localVarFp.studentsControllerDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get all requested jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsControllerGetRequests(options?: any): AxiosPromise<void> {
            return localVarFp.studentsControllerGetRequests(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary request job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsControllerRequestJob(jobId: string, options?: any): AxiosPromise<void> {
            return localVarFp.studentsControllerRequestJob(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update profile
         * @param {UpdateStudentDto} updateStudentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentsControllerUpdateProfile(updateStudentDto: UpdateStudentDto, options?: any): AxiosPromise<Student> {
            return localVarFp.studentsControllerUpdateProfile(updateStudentDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentsApi - object-oriented interface
 * @export
 * @class StudentsApi
 * @extends {BaseAPI}
 */
export class StudentsApi extends BaseAPI {
    /**
     * 
     * @summary accept job
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public studentsControllerAcceptJob(jobId: string, options?: any) {
        return StudentsApiFp(this.configuration).studentsControllerAcceptJob(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete own profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public studentsControllerDelete(options?: any) {
        return StudentsApiFp(this.configuration).studentsControllerDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get all requested jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public studentsControllerGetRequests(options?: any) {
        return StudentsApiFp(this.configuration).studentsControllerGetRequests(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary request job
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public studentsControllerRequestJob(jobId: string, options?: any) {
        return StudentsApiFp(this.configuration).studentsControllerRequestJob(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update profile
     * @param {UpdateStudentDto} updateStudentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public studentsControllerUpdateProfile(updateStudentDto: UpdateStudentDto, options?: any) {
        return StudentsApiFp(this.configuration).studentsControllerUpdateProfile(updateStudentDto, options).then((request) => request(this.axios, this.basePath));
    }
}


